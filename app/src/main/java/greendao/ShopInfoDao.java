package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;


import com.atguigu.bilibili.modle.faxian.mall.bean.ShopInfo;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SHOP_INFO".
*/
public class ShopInfoDao extends AbstractDao<ShopInfo, Long> {

    public static final String TABLENAME = "SHOP_INFO";

    /**
     * Properties of entity ShopInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ImageUrl = new Property(1, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Details = new Property(2, String.class, "details", false, "DETAILS");
        public final static Property Money = new Property(3, int.class, "money", false, "MONEY");
        public final static Property Number = new Property(4, int.class, "number", false, "NUMBER");
        public final static Property IsChecked = new Property(5, boolean.class, "isChecked", false, "IS_CHECKED");
    };


    public ShopInfoDao(DaoConfig config) {
        super(config);
    }

    public ShopInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IMAGE_URL\" TEXT," + // 1: imageUrl
                "\"DETAILS\" TEXT," + // 2: details
                "\"MONEY\" INTEGER NOT NULL ," + // 3: money
                "\"NUMBER\" INTEGER NOT NULL ," + // 4: number
                "\"IS_CHECKED\" INTEGER NOT NULL );"); // 5: isChecked
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShopInfo entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(2, imageUrl);
        }

        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(3, details);
        }
        stmt.bindLong(4, entity.getMoney());
        stmt.bindLong(5, entity.getNumber());
        stmt.bindLong(6, entity.getIsChecked() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShopInfo entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(2, imageUrl);
        }

        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(3, details);
        }
        stmt.bindLong(4, entity.getMoney());
        stmt.bindLong(5, entity.getNumber());
        stmt.bindLong(6, entity.getIsChecked() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public ShopInfo readEntity(Cursor cursor, int offset) {
        ShopInfo entity = new ShopInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imageUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // details
            cursor.getInt(offset + 3), // money
            cursor.getInt(offset + 4), // number
            cursor.getShort(offset + 5) != 0 // isChecked
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, ShopInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImageUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDetails(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMoney(cursor.getInt(offset + 3));
        entity.setNumber(cursor.getInt(offset + 4));
        entity.setIsChecked(cursor.getShort(offset + 5) != 0);
     }

    @Override
    protected final Long updateKeyAfterInsert(ShopInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(ShopInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected boolean hasKey(ShopInfo entity) {
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
